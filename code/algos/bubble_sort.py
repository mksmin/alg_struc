# Bubble sort

def bubble_sort(arr):
    # Цикл для доступа к каждому элементу в списке
    for i in range(len(arr)):
        # Цикл для сравнения элементов в списке
        for j in range(0, len(arr) - i - 1):
            # Сравниваем два смежных элемента
            if arr[j] > arr[j + 1]:
                # Меняем их местами, если они находятся в неправильном порядке
                temp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = temp


data = [-2, 45, 0, 11, -9]
bubble_sort(data)
print('Отсортированный список:', data)

"""Оптимизация алгоритма пузырьковой сортировки: В алгоритме выше, сравнение происходит по всему списку каждый раз, 
даже если он уже отсортирован. Это увеличивает время выполнения алгоритма. Чтобы решить это, мы можем ввести 
переменную 'swapped'. Ее значение будет установлено в True, если происходит замена элементов, в противном случае оно 
будет равно False. После итерации, если замены не было, значение 'swapped' становится False и нет необходимости 
продолжать цикл.

Этот подход снижает время выполнения алгоритма и помогает оптимизировать его работу. """


def bubble_sort_opt(arr):
    # Цикл для доступа к каждому элементу в списке
    for i in range(len(arr)):
        # Следим за заменой
        swapped = False

        # Цикл для сравнения элементов в списке
        for j in range(0, len(arr) - i - 1):
            # Сравниваем два смежных элемента
            if arr[j] > arr[j + 1]:
                # Меняем их местами, если они находятся в неправильном порядке
                temp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = temp
                swapped = True

        if not swapped:
            break


data = [-2, 45, 0, 11, -9]
bubble_sort_opt(data)
print('Отсортированный список:', data)
